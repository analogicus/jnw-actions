#!/usr/bin/env python3
import re
import click
import yaml
import os
import subprocess
import glob
#import urllib
from urllib.parse import quote

class MakeDocs():

    def __init__(self,infofile):
        self.readOptions(infofile)
        self.docdir = "../docs"

        if(not os.path.exists(self.docdir)):
            os.mkdir(self.docdir)

        self.header = """---
layout: page
title: {title}
---

"""

    def _get(self,path,data=None):
        #print(path,data)
        if(data is None):
            return None
        if("." in path):
            arr = path.split(".")
            ndata = self._get(arr[0],data)
            #print(arr[0])
            return self._get(".".join(arr[1:]),ndata)
        elif(path in data):
            return data[path]
        else:
            print(f"Warning: Could not find {path} in {data} ")
            return None


    def doCmdWithReturn(self,cmd):
        result = subprocess.getoutput(cmd)

        return result

    def readOptions(self,infofile):
        self.infofile = infofile
        self.options = None
        if(os.path.exists(infofile)):
            with open(infofile) as fi:
                self.options = yaml.safe_load(fi)

        if(self.options is None):
            raise Exception(f"Error: Could not read {infofile}")

    def makeInstall(self):
        installfile = self.docdir + os.path.sep + "install.md"

        dirname = self.options["library"].lower()
        with open(installfile,"w") as fo:
            fo.write(self.header.replace("{title}","Install"))
            fo.write(f"# Clone " + self.options["library"] + "\n\n")
            fo.write("To install, do the following\n\n")
            fo.write("```bash\n")
            fo.write("python3 -m pip install cicconf\n")
            remote = self.doCmdWithReturn("git  remote -v |grep fetch|awk '{print $2}'")
            fo.write(f"git clone --recursive {remote} {dirname}\n")
            fo.write(f"cicconf --rundir ./ --config {dirname}/config.yaml clone --https\n")
            fo.write("```\n")

        pass

    def makeOneSchematic(self,cellpath):

        print(f"INFO: Generating {cellpath}")
        cell = os.path.basename(cellpath)
        sch = cellpath + ".sch"
        shortpath = cellpath.replace("../design/","")
        svg =  shortpath + ".svg"
        pathsvg =  self.docdir + os.path.sep +  shortpath + ".svg"

        md = cellpath + ".md"
        self.doCmdWithReturn(f'xschem --preinit "set dark_colorscheme 0" -x -q -p --svg {sch}')
        dpath = os.path.dirname(pathsvg)
        if(not os.path.exists(dpath)):
            os.makedirs(dpath)


        os.system(f"cp plot.svg {pathsvg} ")
        mdbuff = ""
        mdinsert = ""
        if(os.path.exists(md)):
            with open(md) as fi:
                for line in fi:
                    mdbuff =fi.read()

        cellname = os.path.basename(cellpath)
        readme = "../sim/" + cellname + "/README.md"
        results = "../sim/" + cellname + "/results"
        if(os.path.exists(readme)):
            with open(readme) as fi1:
                mdinsert = fi1.read()
                mdinsert.replace("results/","assets/")
            if(os.path.exists(results)):
                resultspath = self.docdir + os.path.sep + "assets" + os.path.sep + cellname + os.path.sep
                os.makedirs(resultspath,exist_ok=True)
                cmd = f"cp {results}/*.html {resultspath}"
                print(cmd)
                os.system(cmd)


        buff = f"""### {cell}
{mdbuff}

 ![]({svg})

{mdinsert}

\n"""
        return buff
        pass
    
    def makeSchematics(self):

        libraries = self._get("doc.libraries",self.options)
        if(libraries is None):
            return


        buff = self.header.replace("{title}","Schematics")

        buff += """
* TOC
{:toc }
\n\n"""
        #- Check for Markdowns
        for lib in libraries:
            cells = libraries[lib]
            buff += f"## {lib}\n\n"
            mark = glob.glob(f"../design/{lib}/*.md")
            if(len(cells) > 0):
                for c in cells:
                    buff += self.makeOneSchematic(f"../design/{lib}/{c}")
            #- No markdowns, write all schematics
            elif(len(mark) == 0):
                sch = glob.glob(f"../design/{lib}/*.sch")
                for s in sch:
                    buff += self.makeOneSchematic(s.replace(".sch",""))
            else:
                for s in mark:
                    buff += self.makeOneSchematic(s.replace(".md",""))

        with open(self.docdir + os.path.sep + "schematic.md","w") as fo:
            fo.write(buff)


        pass

    def makeGds(self):
        cell = self._get("cell",self.options)
        library = self._get("library",self.options)

        #- Skip layout if it don't exist
        if(not os.path.exists(f"../design/{library}/{cell}.mag")):
            return

        os.system(f"make gds CELL={cell} LIB={library}")
        os.system(f"cp gds/{cell}.gds ../docs/assets")
        os.system(f"test -d ../../GDS2glTF && python3 ../../GDS2glTF/gds2gltf.py gds/{cell}.gds")

        buff = self.header.replace("{title}","Layout")

        library_lc = library.lower()

        buff += f"""

[GDS](/{library_lc}/assets/{cell}.gds)

        """

        if(os.path.exists(f"gds/{cell}.gds.gltf")):
            os.system(f"cp gds/{cell}.gds.gltf ../docs/assets/")

            url = "https://" + self._get("url",self.options) + f"/{library_lc}/assets/{cell}.gds.gltf"
            print(url)
            urlgltf = quote(url)

            buff += f"""

[GLTF](/{library_lc}/assets/{cell}.gds.gltf)

[3D Model](https://gds-viewer.tinytapeout.com/?model={urlgltf})

        """
        with open(self.docdir + os.path.sep + "layout.md","w") as fo:
            fo.write(buff)

    def copyReadme(self):



        if(not os.path.exists("../README.md")):
            return
        url = "https://github.com/" + self._get("github",self.options) + "/" + self._get("library",self.options).lower()
        rurl = "https://raw.githubusercontent.com/"  + self._get("github",self.options) + "/" + self._get("library",self.options) +  "/refs/heads/main/"
        with open("../docs/index.md","w") as fo:
            fo.write("---\n")
            fo.write("layout: home\n")
            fo.write("---\n\n")
            with open("../README.md") as fi:
                for line in fi:

                    if(re.search("../../actions",line)):
                        line = re.sub("../../actions",f"{url}/actions",line)
                    else:
                        m = re.search(r"!\[[^\]]*\]\(([^\)]+)\)",line)
                        if(m):
                            ourl = m.groups()[0]
                            if(not (ourl.startswith("http://") or ourl.startswith("https://") or ourl.startswith("www") )) :
                                line = line.replace("(" + ourl + ")", "(" + rurl+ ourl + ")")

                        else:
                            m = re.search(r"\[[^\]]*\]\(([^\)]+)\)",line)
                            if(m):
                                ourl = m.groups()[0]
                                if(not (ourl.startswith("http://") or ourl.startswith("https://") or ourl.startswith("www") )) :
                                    line = line.replace("(" + ourl + ")", "(" + url + "/tree/main/" +   ourl + ")")
                                    line = re.sub("/+","/",line)



                    
                    fo.write(line)


    def run(self):

        self.makeInstall()
        self.makeSchematics()
        self.makeGds()
        self.copyReadme()

        pass

@click.command()
@click.option("--info",default="../info.yaml",help="Default info file")
def cli(info):
    c = MakeDocs(info)
    c.run()







if(__name__ == "__main__"):
    cli()
